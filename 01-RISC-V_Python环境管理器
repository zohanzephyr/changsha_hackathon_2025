RISC-V_Python环境管理器

## **1. 题目背景**
  当前常用的 Python 管理工具 Conda 虽然可以在 RISC-V 架构上构建运行，但是其运行效率较低，需要大量时间解决依赖关系并且其软件仓库中并未有大量的RISC-V专用软件包。随着 RISC-V 硬件的发展，AI 等应用场景对 Python 虚拟环境的需求日益增长，因此亟需开发一款专为 RISC-V 平台设计的高效、稳定的 Python 虚拟环境管理器，以更好地支持其部署与运行需求。

## **2. 任务要求**
  2.1 基于RISC-V架构的openKylin系统，使用C/python/rust/go语言开发；
  2.2 实现一个Python 环境管理器，支持在 RISC-V 上创建、激活、停用、删除 Python 虚拟环境，能自动设置与隔离环境变量和路径配置；
  2.3 构建包管理器核心模块，兼容apt仓库结构，支持.deb格式的软件包安装与卸载，实现最基本的包依赖解析逻辑，能正确处理依赖关系；
  2.4 开发用户友好的命令行工具，CLI 风格类 conda，如：hydra create -n myenv python=3.11，实现基础的命令子模块：create, activate, install, list, remove;
  2.5 提供基本的仓库管理功能,支持添加/删除软件源,与系统自身apt源实现隔离，本地索引与缓存机制，能快速查询包信息和版本;
  2.6 实现 Conda 环境兼容导入功能，能解析 Conda 导出的 environment.yml 文件并创建相应环境，简单支持 conda list --export 输出格式的导入；
  2.7 软件包部署，提供deb格式软件包，实现在RISC-V 开发板（如 LicheePi 4A）上便捷安装和部署；

3. 提交要求
  3.1 代码仓库（GitHub/GitLab 链接，或压缩包）。
  3.2 README.md（说明如何编译、运行，以及实现了哪些功能）。
  3.3 演示（讲解 + 运行示例）。

4. 评分标准
4.1 系统设计与实现质量（40 分）
  系统架构设计合理性：模块划分清晰、语言选择合理，具备良好的可扩展性和可维护性	15 分
  关键功能设计说明：具备明确的技术方案或设计文档，能解释环境管理、包管理的内部原理	10 分
  与 RISC-V/openKylin 的适配性：能充分考虑平台特性，运行稳定，资源使用合理	10 分
  代码结构与风格：代码规范、可读性高，具备一定的工程性（如模块化、注释齐全）	5 分
4.2 功能完成度（40 分）
  Python环境管理器功能完整性：能成功创建、激活、停用、删除虚拟环境，路径/变量隔离合理	10 分
  包管理器基本功能实现：能安装/卸载 .deb 包，支持依赖关系的正确处理	10 分
  CLI 命令功能实现程度：支持常用命令子模块：create, activate, install, list, remove 等，用户体验良好	10 分
  仓库管理功能可用性：能管理软件源、本地索引有效，操作不影响系统 apt	5 分
  Conda兼容功能实现情况：能正确读取 environment.yml 并导入环境，格式兼容性良好	5 分
4.2 提交质量与展示表达（20 分）
  README.md 质量：提供完整的编译、运行、功能说明及依赖环境	10 分
  演示效果与表达：视频或文档清晰展示功能，能够讲清楚设计思路与亮点	10 分
5. 参考资料
  可参考conda与mamba等
- [conda](https://github.com/conda/conda)
  https://github.com/mamba-org/mamba
  https://blog.csdn.net/m0_37707561/article/details/121683048

